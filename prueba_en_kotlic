package com.example.miprimeraapp

import org.junit.Assert.*
import org.junit.Test

/**
 * Example local unit test, which will execute on the development machine (host).
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
class ExampleUnitTest {
    private val funciones = Funciones()

    @Test
    fun addition_isCorrect() {
        assertEquals(4, 2 + 2)
    }

    @Test
    fun testSumar() {
        assertEquals(5, funciones.sumar(2, 3))
        assertEquals(-5, funciones.sumar(-2, -3))
        assertEquals(1, funciones.sumar(3, -2))
        assertEquals(0, funciones.sumar(0, 0))
        assertEquals(100, funciones.sumar(50, 50))
    }

    @Test
    fun testRestar() {
        assertEquals(1, funciones.restar(3, 2))
        assertEquals(1, funciones.restar(-2, -3))
        assertEquals(5, funciones.restar(3, -2))
        assertEquals(0, funciones.restar(0, 0))
        assertEquals(1000, funciones.restar(2000, 1000))
    }

    @Test
    fun testMultiplicar() {
        assertEquals(6, funciones.multiplicar(2, 3))
        assertEquals(6, funciones.multiplicar(-2, -3))
        assertEquals(-6, funciones.multiplicar(-2, 3))
        assertEquals(0, funciones.multiplicar(0, 3))
        assertEquals(1000000, funciones.multiplicar(1000, 1000))
    }

    @Test
    fun testDividir() {
        assertEquals(2, funciones.dividir(6, 3))
        assertEquals(2, funciones.dividir(-6, -3))
        assertEquals(-2, funciones.dividir(6, -3))
        assertThrows(IllegalArgumentException::class.java) { funciones.dividir(6, 0) }
        assertEquals(0, funciones.dividir(0, 3))
        assertEquals(1000, funciones.dividir(1000000, 1000))
    }

    @Test
    fun testEsPar() {
        assertTrue(funciones.esPar(4))
        assertFalse(funciones.esPar(3))
        assertTrue(funciones.esPar(0))
    }

    @Test
    fun testCalcularAreaTriangulo() {
        assertEquals(6.0, funciones.calcularAreaTriangulo(3.0, 4.0), 0.0)
        assertThrows(IllegalArgumentException::class.java) { funciones.calcularAreaTriangulo(-3.0, 4.0) }
        assertThrows(IllegalArgumentException::class.java) { funciones.calcularAreaTriangulo(3.0, -4.0) }
        assertEquals(0.0, funciones.calcularAreaTriangulo(0.0, 4.0), 0.0)
        assertEquals(0.0, funciones.calcularAreaTriangulo(3.0, 0.0), 0.0)
        assertEquals(500000.0, funciones.calcularAreaTriangulo(1000.0, 1000.0), 0.0)
    }
}
